<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Key2Joy.Core</name>
    </assembly>
    <members>
        <member name="T:Key2Joy.Config.AttributeProvider">
            <summary>
            Provides methods for retrieving property information and custom attributes.
            Implements the <see cref="T:Key2Joy.Config.IAttributeProvider"/> interface.
            </summary>
        </member>
        <member name="M:Key2Joy.Config.AttributeProvider.GetProperties(System.Type)">
            <summary>
            Retrieves all properties from the given type.
            </summary>
            <param name="type">The type whose properties need to be retrieved.</param>
            <returns>An enumerable of <see cref="T:System.Reflection.PropertyInfo"/> representing the properties of the given type.</returns>
        </member>
        <member name="M:Key2Joy.Config.AttributeProvider.GetCustomConfigControlAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves the custom <see cref="T:Key2Joy.Config.ConfigControlAttribute"/> associated with the given property.
            </summary>
            <param name="property">The property whose custom attribute needs to be retrieved.</param>
            <returns>The <see cref="T:Key2Joy.Config.ConfigControlAttribute"/> associated with the property, or null if no such attribute exists.</returns>
        </member>
        <member name="T:Key2Joy.Config.BooleanConfigControlAttribute">
            <summary>
            Only applied to <see cref="T:Key2Joy.Config.ConfigState"/>
            </summary>
        </member>
        <member name="T:Key2Joy.Config.ConfigControlAttribute">
            <summary>
            Only applied to <see cref="T:Key2Joy.Config.ConfigState"/>
            </summary>
        </member>
        <member name="M:Key2Joy.Config.ConfigControlAttribute.GetAllProperties(System.Type,Key2Joy.Config.IAttributeProvider)">
            <summary>
            Gets all configs and their property
            </summary>
            <returns></returns>
        </member>
        <member name="T:Key2Joy.Config.ConfigManager">
            <summary>
            Manages user configurations being loaded from and saved to disk.
            </summary>
        </member>
        <member name="M:Key2Joy.Config.ConfigManager.GetAppDataDirectory">
            <returns>The path to where the config file is located.</returns>
        </member>
        <member name="M:Key2Joy.Config.ConfigManager.LoadOrCreate">
            <summary>
            Loads the configuration or creates a default one on disk.
            </summary>
        </member>
        <member name="M:Key2Joy.Config.ConfigManager.NormalizePluginPath(System.String)">
            <summary>
            Turns the plugin path into a relative one from the app directory
            </summary>
            <param name="pluginAssemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Config.ConfigManager.SetPluginEnabled(System.String,System.String)">
             <summary>
             Sets a plugin as enabled, the permissions checksum is stored so no changes to the permissions
             are accepted when loading the plugin later.
            
             Set permissionsChecksumOrNull to null to disable the plugin.
             </summary>
             <param name="pluginAssemblyPath"></param>
             <param name="permissionsChecksumOrNull"></param>
        </member>
        <member name="T:Key2Joy.Config.IAttributeProvider">
            <summary>
            Provides an abstraction for retrieving property information and custom attributes.
            </summary>
        </member>
        <member name="M:Key2Joy.Config.IAttributeProvider.GetProperties(System.Type)">
            <summary>
            Retrieves all properties from the given type.
            </summary>
            <param name="type">The type whose properties need to be retrieved.</param>
            <returns>An enumerable of <see cref="T:System.Reflection.PropertyInfo"/> representing the properties of the given type.</returns>
        </member>
        <member name="M:Key2Joy.Config.IAttributeProvider.GetCustomConfigControlAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves the custom <see cref="T:Key2Joy.Config.ConfigControlAttribute"/> associated with the given property.
            </summary>
            <param name="property">The property whose custom attribute needs to be retrieved.</param>
            <returns>The <see cref="T:Key2Joy.Config.ConfigControlAttribute"/> associated with the property, or null if no such attribute exists.</returns>
        </member>
        <member name="T:Key2Joy.Config.NumericConfigControlAttribute">
            <summary>
            Only applied to <see cref="T:Key2Joy.Config.ConfigState"/>
            </summary>
        </member>
        <member name="T:Key2Joy.Config.TextConfigControlAttribute">
            <summary>
            Only applied to <see cref="T:Key2Joy.Config.ConfigState"/>
            </summary>
        </member>
        <member name="T:Key2Joy.Interop.InteropClient">
            <summary>
            Singleton client for communication with the Key2Joy service.
            This is used by the Key2Joy.Cmd CLI to send commands to the service and
            enable/disable mappings.
            </summary>
        </member>
        <member name="M:Key2Joy.Interop.InteropClient.SendCommand``1(``0)">
            <summary>
            Sends a command to the main app, for example to enable/disable mappings.
            </summary>
            <typeparam name="TCommandType"></typeparam>
            <param name="command"></param>
        </member>
        <member name="M:Key2Joy.Interop.InteropServer.ReadCommandId(System.IO.Pipes.NamedPipeServerStream)">
            <summary>
            Read the first byte and use it to get the type struct
            </summary>
            <param name="pipeServer"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Interop.InteropServer.GetCommandInfo(System.Byte)">
            <summary>
            Convert a byte identifier to command info by looking it up
            </summary>
            <param name="commandId"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Interop.InteropServer.ReadCommand(System.IO.Pipes.NamedPipeServerStream,Key2Joy.Interop.Commands.CommandInfo)">
            <summary>
            Reads the full command of a certain type from the pipe
            </summary>
            <param name="pipeServer"></param>
            <param name="commandInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Interop.InteropServer.HandleCommand(System.Object)">
            <summary>
            Handle a command by calling the appropriate handler
            </summary>
            <param name="command"></param>
        </member>
        <member name="F:Key2Joy.Key2JoyManager.PluginsDirectory">
            <summary>
            Directory where plugins are located
            </summary>
        </member>
        <member name="P:Key2Joy.Key2JoyManager.ExplicitTriggerListeners">
            <summary>
            Trigger listeners that should explicitly loaded. This ensures that they're available for scripts
            even if no mapping option is mapped to be triggered by it.
            </summary>
        </member>
        <member name="M:Key2Joy.Key2JoyManager.InitSafely(Key2Joy.AppCommandRunner,System.Action{Key2Joy.Plugins.PluginSet},Key2Joy.Config.IConfigManager)">
            <summary>
            Ensures Key2Joy is running and ready to accept commands as long as the main loop does not end.
            </summary>
            <param name="commandRunner"></param>
            <param name="mainLoop"></param>
            <param name="configManager">Optionally a custom config manager (probably only useful for unit testing)</param>
        </member>
        <member name="M:Key2Joy.Key2JoyManager.StartKey2Joy(System.Boolean,System.Boolean)">
            <summary>
            Starts Key2Joy, pausing until it's ready
            </summary>
        </member>
        <member name="M:Key2Joy.LowLevelInput.GamePad.IGamePad.GetState">
            <summary>
            Get the raw input state from the GamePad
            </summary>
        </member>
        <member name="M:Key2Joy.LowLevelInput.GamePad.IGamePad.ResetState">
            <summary>
            Resets the GamePad state to the natural at-rest stat
            </summary>
        </member>
        <member name="M:Key2Joy.LowLevelInput.GamePad.IGamePad.Update">
            <summary>
            Update any changes made to the state to be reflected in the gamepad
            </summary>
        </member>
        <member name="T:Key2Joy.LowLevelInput.GamePad.SimulatedGamePad">
            <summary>
            Implementation based on https://github.com/DavidRieman/SimWinInput
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelKeyboardInputEvent.VirtualCode">
            <summary>
            A virtual-key code. The code must be a value in the range 1 to 254.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelKeyboardInputEvent.HardwareScanCode">
            <summary>
            A hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelKeyboardInputEvent.Flags">
             <summary>
             The extended-key flag, event-injected Flags, context code, and transition-state flag. This member is specified as follows. An application can use the following values to test the keystroke Flags. Testing LLKHF_INJECTED (bit 4) will tell you whether the event was injected. If it was, then testing LLKHF_LOWER_IL_INJECTED (bit 1) will tell you whether or not the event was injected from a process running at lower integrity level.
             
             - LLKHF_EXTENDED
             (KF_EXTENDED >> 8)
             Test the extended-key flag.
            
             - LLKHF_LOWER_IL_INJECTED
             0x00000002
             Test the event-injected (from a process running at lower integrity level) flag.
            
             - LLKHF_INJECTED
             0x00000010
             Test the event-injected (from any process) flag.
            
             - LLKHF_ALTDOWN
             (KF_ALTDOWN >> 8)
             Test the context code.
            
             - LLKHF_UP
             (KF_UP >> 8)
             Test the transition-state flag. 
             </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelKeyboardInputEvent.TimeStamp">
            <summary>
            The time stamp stamp for this message, equivalent to what GetMessageTime would return for this message.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelKeyboardInputEvent.AdditionalInformation">
            <summary>
            Additional information associated with the message. 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelMouseInputEvent.Position">
            <summary>
            The x- and y-coordinates of the cursor, in per-monitor-aware screen coordinates.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelMouseInputEvent.MouseData">
            <summary>
            If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. The low-order word is reserved. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120.
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP, or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, and the low-order word is reserved.This value can be one or more of the following values.Otherwise, mouseData is not used.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelMouseInputEvent.Flags">
            <summary>
            The extended-key flag, event-injected Flags, context code, and transition-state flag. This member is specified as follows. An application can use the following values to test the keystroke Flags. Testing LLKHF_INJECTED (bit 4) will tell you whether the event was injected. If it was, then testing LLKHF_LOWER_IL_INJECTED (bit 1) will tell you whether or not the event was injected from a process running at lower integrity level.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelMouseInputEvent.TimeStamp">
            <summary>
            The time stamp stamp for this message, equivalent to what GetMessageTime would return for this message.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.LowLevelMouseInputEvent.AdditionalInformation">
            <summary>
            Additional information associated with the message. 
            </summary>
        </member>
        <member name="T:Key2Joy.LowLevelInput.Mouse.MoveType">
            <summary>
            Represents the type of mouse movement.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.MoveType.Relative">
            <summary>
            Specifies relative movement to where the cursor is now.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.MoveType.Absolute">
            <summary>
            Specifies absolute movement of the cursor on screen.
            </summary>
        </member>
        <member name="T:Key2Joy.LowLevelInput.Mouse.Buttons">
            <summary>
            Represents the buttons on a mouse.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.None">
            <summary>
            No button is pressed.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.XButton1">
            <summary>
            The first extra mouse button.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.XButton2">
            <summary>
            The second extra mouse button.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.WheelUp">
            <summary>
            The mouse wheel is moved upward.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Mouse.Buttons.WheelDown">
            <summary>
            The mouse wheel is moved downward.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.MouseState.NonClientXButtonDoubleClick">
            <summary>
            Posted when the user double-clicks the first or second X button while the cursor is in 
            the nonclient area of a window. This message is posted to the window that contains the 
            cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="T:Key2Joy.LowLevelInput.NativeHookManager">
            <summary>
            Represents a class for managing native hooks.
            </summary>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.InternalLoadLibrary(System.String)">
            <summary>
            Loads a dynamic-link library (DLL) into the address space of the calling process.
            </summary>
            <param name="lpFileName">The name of the DLL to load.</param>
            <returns>A handle to the loaded DLL if successful; otherwise, IntPtr.Zero.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.InternalFreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the loaded DLL.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.InternalSetWindowsHookEx(System.Int32,Key2Joy.LowLevelInput.GlobalInputHook.HookProc,System.IntPtr,System.Int32)">
            <summary>
            Installs an application-defined hook procedure into a hook chain.
            </summary>
            <param name="idHook">The type of hook to be installed.</param>
            <param name="lpfn">A pointer to the hook procedure.</param>
            <param name="hMod">A handle to the DLL containing the hook procedure.</param>
            <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated.</param>
            <returns>A handle to the hook procedure if successful; otherwise, IntPtr.Zero.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.InternalUnhookWindowsHookEx(System.IntPtr)">
            <summary>
            Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.
            </summary>
            <param name="hHook">A handle to the hook to be removed.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.InternalCallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes the hook information to the next hook procedure in the current hook chain.
            </summary>
            <param name="hHook">A handle to the current hook.</param>
            <param name="code">The hook code passed to the current hook procedure.</param>
            <param name="wParam">The wParam value passed to the current hook procedure.</param>
            <param name="lParam">The lParam value passed to the current hook procedure.</param>
            <returns>The return value of the next hook procedure.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.LoadLibrary(System.String)">
            <summary>
            Loads a dynamic-link library (DLL) into the address space of the calling process.
            </summary>
            <param name="lpFileName">The name of the DLL to load.</param>
            <returns>A handle to the loaded DLL if successful; otherwise, IntPtr.Zero.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the loaded DLL.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.SetWindowsHookEx(System.Int32,Key2Joy.LowLevelInput.GlobalInputHook.HookProc,System.IntPtr,System.Int32)">
            <summary>
            Installs an application-defined hook procedure into a hook chain.
            </summary>
            <param name="idHook">The type of hook to be installed.</param>
            <param name="lpfn">A pointer to the hook procedure.</param>
            <param name="hMod">A handle to the DLL containing the hook procedure.</param>
            <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated.</param>
            <returns>A handle to the hook procedure if successful; otherwise, IntPtr.Zero.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.
            </summary>
            <param name="hHook">A handle to the hook to be removed.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Key2Joy.LowLevelInput.NativeHookManager.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes the hook information to the next hook procedure in the current hook chain.
            </summary>
            <param name="hHook">A handle to the current hook.</param>
            <param name="code">The hook code passed to the current hook procedure.</param>
            <param name="wParam">The wParam value passed to the current hook procedure.</param>
            <param name="lParam">The lParam value passed to the current hook procedure.</param>
            <returns>The return value of the next hook procedure.</returns>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Point.X">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.Point.Y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.PressState.Press">
            <summary>
            The key/button is pressed down
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.PressState.Release">
            <summary>
            The key/button is released (after having been pressed down)
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.PressStates.ALL">
            <summary>
            All available press states
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse)
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.KEY_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard) 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F17">
            <summary>
            F17 key  
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F18">
            <summary>
            F18 key  
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F19">
            <summary>
            F19 key  
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F20">
            <summary>
            F20 key  
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F21">
            <summary>
            F21 key  
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F22">
            <summary>
            F22 key, (PPC only) Key used to lock device.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F23">
            <summary>
            F23 key  
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.F24">
            <summary>
            F24 key  
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LSHIFT">
            <summary>
            Left SHIFT key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.RSHIFT">
            <summary>
            Right SHIFT key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LCONTROL">
            <summary>
            Left CONTROL key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.RCONTROL">
            <summary>
            Right CONTROL key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LMENU">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.RMENU">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes.
            The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information,
            see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.NONAME">
            <summary>
            Reserved 
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.SimulatedKeyboard.VirtualKeyShort.OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="M:Key2Joy.LowLevelInput.Simulator.SendInput(System.UInt32,Key2Joy.LowLevelInput.Simulator.INPUT[],System.Int32)">
            <summary>
            Declaration of external SendInput method
            </summary>
        </member>
        <member name="T:Key2Joy.LowLevelInput.Simulator.HARDWAREINPUT">
            <summary>
            Define HARDWAREINPUT struct
            </summary>
        </member>
        <member name="T:Key2Joy.LowLevelInput.MapVirtualKeyMapTypes">
            <summary>
            The set of valid MapTypes used in MapVirtualKey
            </summary>
            <remarks>
            Source: http://pinvoke.net/default.aspx/user32/MapVirtualKey.html?diff=y
            </remarks>
        </member>
        <member name="F:Key2Joy.LowLevelInput.MapVirtualKeyMapTypes.MAPVK_VK_TO_VSC">
            <summary>
            uCode is a virtual-key code and is translated into a scan code.
            If it is a virtual-key code that does not distinguish between left- and
            right-hand keys, the left-hand scan code is returned.
            If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.MapVirtualKeyMapTypes.MAPVK_VSC_TO_VK">
            <summary>
            uCode is a scan code and is translated into a virtual-key code that
            does not distinguish between left- and right-hand keys. If there is no
            translation, the function returns 0.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.MapVirtualKeyMapTypes.MAPVK_VK_TO_CHAR">
            <summary>
            uCode is a virtual-key code and is translated into an unshifted
            character value in the low-order word of the return value. Dead keys (diacritics)
            are indicated by setting the top bit of the return value. If there is no
            translation, the function returns 0.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.MapVirtualKeyMapTypes.MAPVK_VSC_TO_VK_EX">
            <summary>
            Windows NT/2000/XP: uCode is a scan code and is translated into a
            virtual-key code that distinguishes between left- and right-hand keys. If
            there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:Key2Joy.LowLevelInput.MapVirtualKeyMapTypes.MAPVK_VK_TO_VSC_EX">
            <summary>
            Not currently documented
            </summary>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.ActionsRepository.Buffer(System.Collections.Generic.IReadOnlyList{Key2Joy.Plugins.MappingTypeFactory{Key2Joy.Contracts.Mapping.Actions.AbstractAction}},System.Boolean)">
            <summary>
            Loads all actions in the assembly, optionally merging it with additional action types.
            </summary>
            <param name="additionalActionTypeFactories"></param>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.ActionsRepository.GetAllActions">
            <summary>
            Gets all action type factories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.ActionsRepository.GetAllActionAttributes">
            <summary>
            Gets all action attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.ActionsRepository.GetAttributeForAction(Key2Joy.Contracts.Mapping.Actions.AbstractAction)">
            <summary>
            Gets the attribute for the provided action
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.ActionsRepository.GetAction(System.Type)">
            <summary>
            Gets a specific action factory by its type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.ActionsRepository.GetAllActions(System.Boolean)">
            <summary>
            Gets all action types and their attribute annotations depending on the specified visibility
            </summary>
            <param name="forTopLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Graphics.CaptureScreenAction.ExecuteForScript(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
             <markdown-doc>
             <parent-name>Graphics</parent-name>
             <path>Api/Graphics</path>
             </markdown-doc>
             <summary>
             Captures the specified Screen Region in the specified format
             </summary>
             <markdown-example>
             Captures the entire screen to a jpeg file on your desktop
             <code language="lua">
             <![CDATA[
             Graphics.CaptureScreen(Util.PathExpand("%HOMEDRIVE%/%HOMEPATH%/Desktop/capture.jpg"))
             ]]>
             </code>
             </markdown-example>
             <markdown-example>
             Captures a region of 500 sq pixels around the cursor as a png to the desktop.
             <code language="lua">
             <![CDATA[
             local cursor = Cursor.GetPosition()
             local size = 500
             local halfSize = size * .5
             Graphics.CaptureScreen(
                 Util.PathExpand("%HOMEDRIVE%/%HOMEPATH%/Desktop/region-capture.png"),
                 cursor.X - halfSize,
                 cursor.Y - halfSize,
                 size,
                 size
             )
             ]]>
             </code>
             </markdown-example>
             <markdown-example>
             Captures a sequence of images from the screen and saves them to a folder on the desktop (frames/)
             <code language="lua">
             <![CDATA[
             local frame = 1
             local frameCount = 30
             local framesPerSecond = 5
             local interval
             interval = SetInterval(function()
                Graphics.CaptureScreen(Util.PathExpand("%HOMEDRIVE%/%HOMEPATH%/Desktop/frames/"..frame..".png"))
                frame = frame + 1
            
                if(frame > frameCount)then
                   ClearInterval(interval)
                end
             end, 1000 / framesPerSecond)
             ]]>
             </code>
             </markdown-example>
             <param name="savePath">File path on device where to save the screen capture. The extension you specify decides the format. Supported extensions: .jpeg/.jpg, .png, .bmp, .gif(not animated), .ico, .emf, .exif, .tiff, .wmf</param>
             <param name="x">X position on screen. Defaults to first monitor X start.</param>
             <param name="y">Y position on screen. Defaults to first monitor Y start.</param>
             <param name="w">Width of region to capture. Defaults to (all) screens width.</param>
             <param name="h">Height of region to capture. Defaults to (all) screens height.</param>
             <name>Graphics.CaptureScreen</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Graphics.GetPixelColorAction.ExecuteForScript(System.Int32,System.Int32)">
            <markdown-doc>
            <parent-name>Graphics</parent-name>
            <path>Api/Graphics</path>
            </markdown-doc>
            <summary>
            Gets the color of a pixel at the given x and y position
            </summary>
            <markdown-example>
            Shows the color of the pixel at the mouse position
            <code language="lua">
            <![CDATA[
            local cursor = Cursor.GetPosition()
            local pixelColor = Graphics.GetPixelColor(cursor.X, cursor.Y)
            print(pixelColor.R) -- Red
            print(pixelColor.G) -- Green
            print(pixelColor.B) -- Blue
            print(pixelColor.A) -- Alpha (opacity, always 255)
            ]]>
            </code>
            </markdown-example>
            <returns>A color object containing Red, Green and Blue color information</returns>
            <param name="x">X position on screen</param>
            <param name="y">Y position on screen</param>
            <name>Graphics.GetPixelColor</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.GamePadAction.ExecuteForScript(SimWinInput.GamePadControl,Key2Joy.LowLevelInput.PressState,System.Int32)">
            <markdown-doc>
            <parent-name>Input</parent-name>
            <path>Api/Input</path>
            </markdown-doc>
            <summary>
            Simulate pressing or releasing (or both) gamepad buttons.
            </summary>
            <markdown-example>
            Shows how to press "A" on the gamepad for 500ms, then release it.
            <code language="js">
            <![CDATA[
            GamePad.Simulate(GamePadControl.A, PressState.Press);
            setTimeout(function () {
                GamePad.Simulate(GamePadControl.A, PressState.Release);
            }, 500);
            ]]>
            </code>
            </markdown-example>
            <param name="control">Button to simulate</param>
            <param name="pressState">Action to simulate</param>
            <param name="gamepadIndex">Which of 4 possible gamepads to simulate: 0 (default), 1, 2 or 3</param>
            <name>GamePad.Simulate</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.GamePadResetAction.ExecuteForScript(System.Int32)">
            <markdown-doc>
            <parent-name>Input</parent-name>
            <path>Api/Input</path>
            </markdown-doc>
            <summary>
            Reset the gamepad so the stick returns to the resting position (0,0)
            </summary>
            <markdown-example>
            Moves the left gamepad joystick halfway down and to the right, then resets after 500ms
            <code language="lua">
            <![CDATA[
            GamePad.SimulateMove(0.5,0.5)
            SetTimeout(function()
               GamePad.Reset()
            end, 500)
            ]]>
            </code>
            </markdown-example>
            <param name="gamepadIndex">Which of 4 possible gamepads to simulate: 0 (default), 1, 2 or 3</param>
            <name>GamePad.Reset</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.GamePadStickAction.ExecuteForScript(System.Double,System.Double,Key2Joy.LowLevelInput.Simulator.GamePadStick,System.Int32)">
            <markdown-doc>
            <parent-name>Input</parent-name>
            <path>Api/Input</path>
            </markdown-doc>
            <summary>
            Simulate moving a gamepad joystick
            </summary>
            <markdown-example>
            Moves the left gamepad joystick halfway down and to the right, then resets after 500ms
            <code language="lua">
            <![CDATA[
            GamePad.SimulateMove(0.5,0.5)
            SetTimeout(function()
               GamePad.Reset()
            end, 500)
            ]]>
            </code>
            </markdown-example>
            <param name="deltaX">The fraction by which to move the stick forward (negative) or backward (positive)</param>
            <param name="deltaY">The fraction by which to move the stick right (positive) or left (negative)</param>
            <param name="stick">Which gamepad stick to move, either GamePadStick.Left (default) or .Right</param>
            <param name="gamepadIndex">Which of 4 possible gamepads to simulate: 0 (default), 1, 2 or 3</param>
            <name>GamePad.SimulateMove</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.GetCursorPositionAction.ExecuteForScript">
            <markdown-doc>
            <parent-name>Input</parent-name>
            <path>Api/Input</path>
            </markdown-doc>
            <summary>
            Gets the current cursor position
            </summary>
            <markdown-example>
            The code below prints 0, 0 when the cursor is held in the top left of the first monitor.
            <code language="js">
            <![CDATA[
            var cursorPosition = Cursor.GetPosition()
            Print(`${cursorPosition.X}, ${cursorPosition.Y}`)
            ]]>
            </code>
            <code language="lua">
            <![CDATA[
            local cursorPosition = Cursor.GetPosition()
            print(cursorPosition.X .. ", " .. cursorPosition.Y)
            ]]>
            </code>
            </markdown-example>
            <returns>A Point object with X and Y properties that represent the cursor X and Y</returns>
            <name>Cursor.GetPosition</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.KeyboardAction.ExecuteForScript(Key2Joy.LowLevelInput.KeyboardKey,Key2Joy.LowLevelInput.PressState)">
            <markdown-doc>
            <parent-name>Input</parent-name>
            <path>Api/Input</path>
            </markdown-doc>
            <summary>
            Simulate pressing or releasing (or both) keyboard keys.
            </summary>
            <param name="key">Key to simulate</param>
            <param name="pressState">Action to simulate</param>
            <name>Keyboard.Simulate</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.KeyboardGetKeyDownAction.ExecuteForScript(Key2Joy.LowLevelInput.KeyboardKey)">
             <markdown-doc>
             <parent-name>Input</parent-name>
             <path>Api/Input</path>
             </markdown-doc>
             <summary>
             Tests if the provided keyboard key is currently pressed.
            
             Note: This function currently has trouble distinguishing between left and right keys. This means that `Keyboard.GetKeyDown(KeyboardKey.RightControl)` will return true even if the left control is pressed.
            
             You can find the keycodes in <see href="../Enumerations/KeyboardKey.md">the KeyboardKey Enumeration</see>.
             </summary>
             <markdown-example>
             Shows how to show all keys currently pressed.
             <code language="lua">
             <![CDATA[
             for keyName, key in pairs(KeyboardKey)do
                if(Keyboard.GetKeyDown(key))then
                   Print(keyName, "is currently pressed")
                end
             end
             ]]>
             </code>
             </markdown-example>
             <markdown-example>
             Shows how to only simulate pressing "A" when shift is also held down. This allows binding to multiple keys, where one is the trigger and the rest of the inputs are checked in the script.
             <code language="js">
             <![CDATA[
             if(Keyboard.GetKeyDown(KeyboardKey.Shift)) {
               GamePad.Simulate(GamePadControl.A, PressState.Press);
             }
             ]]>
             </code>
             </markdown-example>
             <param name="key">The key to test for</param>
             <returns>True if the key is currently pressed down, false otherwise</returns>
             <name>Keyboard.GetKeyDown</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.MouseButtonAction.ExecuteForScript(Key2Joy.LowLevelInput.Mouse.Buttons,Key2Joy.LowLevelInput.PressState)">
            <markdown-doc>
            <parent-name>Input</parent-name>
            <path>Api/Input</path>
            </markdown-doc>
            <summary>
            Simulate pressing or releasing (or both) mouse buttons.
            </summary>
            <param name="button">Button to simulate</param>
            <param name="pressState">Action to simulate</param>
            <name>Mouse.Simulate</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.MouseGetButtonDownAction.ExecuteForScript(Key2Joy.LowLevelInput.Mouse.Buttons)">
             <markdown-doc>
             <parent-name>Input</parent-name>
             <path>Api/Input</path>
             </markdown-doc>
             <summary>
             Tests if the provided mouse button is currently pressed.
            
             You can find the button codes in <see href="../Enumerations/Buttons.md"/>.
             </summary>
             <markdown-example>
             Shows how to show all mouse buttons currently pressed.
             <code language="lua">
             <![CDATA[
             for buttonName, button in pairs(Buttons)do
                if(Buttons.GetButtonDown(button))then
                   Print(buttonName, "is currently pressed")
                end
             end
             ]]>
             </code>
             </markdown-example>
             <param name="button">The button to test for</param>
             <returns>True if the button is currently pressed down, false otherwise</returns>
             <name>Mouse.GetButtonDown</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Input.MouseMoveAction.ExecuteForScript(System.Int32,System.Int32,Key2Joy.LowLevelInput.Mouse.MoveType)">
            <markdown-doc>
            <parent-name>Input</parent-name>
            <path>Api/Input</path>
            </markdown-doc>
            <summary>
            Simulate moving the mouse
            </summary>
            <markdown-example>
            Nudges the cursor 100 pixels to the left from where it is now.
            <code language="js">
            <![CDATA[
            Mouse.SimulateMove(-100,0)
            ]]>
            </code>
            </markdown-example>
            <markdown-example>
            Moves the cursor to an absolute position on the screen.
            <code language="lua">
            <![CDATA[
            Mouse.SimulateMove(1024,1050,MoveType.Absolute)
            ]]>
            </code>
            </markdown-example>
            <param name="x">X coordinate to move by/to</param>
            <param name="y">Y coordinate to move by/to</param>
            <param name="moveType">Whether to move relative to the current cursor position (default) or to an absolute position on screen</param>
            <name>Mouse.SimulateMove</name>
        </member>
        <member name="T:Key2Joy.Mapping.Actions.Logic.AppCommand">
            <summary>
            The possible commands to run in the app.
            </summary>
        </member>
        <member name="F:Key2Joy.Mapping.Actions.Logic.AppCommand.Abort">
            <summary>
            Aborts listening for triggers
            </summary>
        </member>
        <member name="F:Key2Joy.Mapping.Actions.Logic.AppCommand.ResetScriptEnvironment">
            <summary>
            Recreate the scripting environment (loses all variables, functions and other changes scripts made)
            </summary>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Logic.AppCommandAction.ExecuteForScript(Key2Joy.Mapping.Actions.Logic.AppCommand)">
             <markdown-doc>
             <parent-name>Logic</parent-name>
             <path>Api/Logic</path>
             </markdown-doc>
             <summary>
             Execute a command in this app.
            
             See the <see href="../Enumerations/AppCommand.md">AppCommand Enumeration</see> for a list of available commands.
             </summary>
             <param name="command">Command to execute</param>
             <name>App.Command</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Logic.ClearIntervalAction.ExecuteForScript(Key2Joy.Mapping.Actions.Logic.IdPool.IntervalId)">
             <markdown-doc>
             <parent-name>Logic</parent-name>
             <path>Api/Logic</path>
             </markdown-doc>
             <summary>
             Cancels an interval previously established by calling SetInterval()
             </summary>
             <markdown-example>
             Shows how to count up to 3 every second and then stop by using ClearInterval();
             <code language="js">
             <![CDATA[
             var count = 0;
             var intervalId;
            
             intervalId = setInterval(() => {
                Print(count++);
            
                if(count == 3)
                   clearInterval(intervalId);
             }, 1000);
            
             Print(intervalId);
             ]]>
             </code>
             </markdown-example>
             <name>ClearInterval</name>
             <param name="intervalId">Id returned by SetInterval to cancel</param>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Logic.ClearTimeoutAction.ExecuteForScript(Key2Joy.Mapping.Actions.Logic.IdPool.TimeoutId)">
             <markdown-doc>
             <parent-name>Logic</parent-name>
             <path>Api/Logic</path>
             </markdown-doc>
             <summary>
             Cancels a timeout previously established by calling SetTimeout()
             </summary>
             <markdown-example>
             Shows how to set and immediately cancel a timeout.
             <code language="js">
             <![CDATA[
             var timeoutID = setTimeout(() => {
                Print("You shouldn't see this because the timeout will have been cancelled!");
             }, 1000);
            
             Print(timeoutID);
            
             clearTimeout(timeoutID);
             ]]>
             </code>
             </markdown-example>
             <name>ClearTimeout</name>
             <param name="timeoutId">Id returned by SetTimeout to cancel</param>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Logic.MessageBoxAction.ExecuteForScript(System.String)">
            <markdown-doc>
            <parent-name>Logic</parent-name>
            <path>Api/Logic</path>
            </markdown-doc>
            <summary>
            Displays a MessageBox with the given text
            </summary>
            <param name="content">The text to display</param>
            <name>MessageBox.Show</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Logic.SetDelayedFunctionsAction.ExecuteForScript(System.Int64,System.Action[])">
             <markdown-doc>
             <parent-name>Logic</parent-name>
             <path>Api/Logic</path>
             </markdown-doc>
             <summary>
             Execute functions whilst waiting the specified time between them.
            
             The first function is executed immediately.
             </summary>
             <markdown-example>
             Shows how to count down from 3 and execute a command using Lua.
             <code language="lua">
             <![CDATA[
             SetDelayedFunctions(
                1000,
                function ()
                   Print("Aborting in 3 second...")
                end,
                function ()
                   Print("Three")
                end,
                function ()
                   Print("Two")
                end,
                function ()
                   Print("One")
                end,
                function ()
                   App.Command("abort")
                end
             )
             ]]>
             </code>
             </markdown-example>
             <param name="waitTime">Time to wait (in milliseconds) between function calls</param>
             <param name="callbacks">One or more functions to execute</param>
             <name>SetDelayedFunctions</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Logic.SetIntervalAction.ExecuteForScript(Key2Joy.Mapping.Actions.Logic.SetIntervalAction.CallbackAction,System.Int64,System.Object[])">
             <markdown-doc>
             <parent-name>Logic</parent-name>
             <path>Api/Logic</path>
             </markdown-doc>
             <summary>
             Repeatedly calls a function or executes a code snippet, with a fixed time delay between each call
             </summary>
             <markdown-example>
             Shows how to count up to 10 every second and then stop by using ClearInterval();
             <code language="js">
             <![CDATA[
             setTimeout(function () {
               Print("Aborting in 3 second...")
            
               setTimeout(function () {
                 Print("Three")
            
                 setTimeout(function () {
                   Print("Two")
            
                   setTimeout(function () {
                     Print("One")
            
                     setTimeout(function () {
                       App.Command("abort")
                     }, 1000)
                   }, 1000)
                 }, 1000)
               }, 1000)
             }, 1000)
             ]]>
             </code>
             </markdown-example>
             <param name="callback">Function to execute after each wait</param>
             <param name="waitTime">Time to wait (in milliseconds)</param>
             <param name="arguments">Zero or more extra parameters to pass to the function</param>
             <returns>An interval id that can be removed with clearInterval</returns>
             <name>SetInterval</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Logic.SetTimeoutAction.ExecuteForScript(Key2Joy.Mapping.Actions.Logic.SetTimeoutAction.CallbackAction,System.Int64,System.Object[])">
             <markdown-doc>
             <parent-name>Logic</parent-name>
             <path>Api/Logic</path>
             </markdown-doc>
             <summary>
             Timeout for the specified duration in milliseconds, then execute the callback
             </summary>
             <markdown-example>
             Shows how to count down from 3 and execute a command using Javascript.
             <code language="js">
             <![CDATA[
             setTimeout(function () {
               Print("Aborting in 3 second...")
            
               setTimeout(function () {
                 Print("Three")
            
                 setTimeout(function () {
                   Print("Two")
            
                   setTimeout(function () {
                     Print("One")
            
                     setTimeout(function () {
                       App.Command("abort")
                     }, 1000)
                   }, 1000)
                 }, 1000)
               }, 1000)
             }, 1000)
             ]]>
             </code>
             </markdown-example>
             <markdown-example>
             Shows how to count down from 3 each second and execute a command using Lua.
             <code language="lua">
             <![CDATA[
             SetTimeout(function ()
                Print("Aborting in 3 second...")
            
                SetTimeout(function ()
                   Print("Three")
            
                   SetTimeout(function ()
                      Print("Two")
            
                      SetTimeout(function ()
                         Print("One")
            
                         SetTimeout(function ()
                            App.Command("abort")
                         end, 1000)
                      end, 1000)
                   end, 1000)
                end, 1000)
             end, 1000)
             ]]>
             </code>
             </markdown-example>
             <param name="callback">Function to execute after the wait</param>
             <param name="waitTime">Time to wait (in milliseconds)</param>
             <param name="arguments">Zero or more extra parameters to pass to the function</param>
             <returns>A timeout id that can be removed with clearTimeout</returns>
             <name>SetTimeout</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Scripting.BaseScriptAction.RegisterScriptingMethod(Key2Joy.Mapping.Actions.Scripting.ExposedMethod,Key2Joy.Contracts.Mapping.Actions.AbstractAction)">
            <summary>
            Called to register scripting methods on the environment.
            </summary>
            <param name="exposedMethod">The method to be exposed to scripting</param>
            <param name="scriptActionInstance">The action on which the exposed method resides</param>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Scripting.ExposedMethod.RegisterParameterTransformer``1(Key2Joy.Mapping.Actions.Scripting.ParameterTransformerDelegate{``0})">
            <summary>
            Register a transformer for certain types coming from scripts.
            The transformer will get the parameter value and the type of the method parameter.
            The transformer must return an object that will be passed to the method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transformer"></param>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Scripting.ExposedMethod.TransformAndRedirect(System.Object[])">
            <summary>
            Will try to transform the parameter to the type of the method parameter.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Scripting.ExposedMethod.GetExecutorMethodInfo">
            <summary>
            MethodInfo that can be bound to scripts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Scripting.LuaIterator.Next(System.Object,System.Nullable{System.Int32},System.Object@)">
            <summary>
            Lua iterator 'Next' implementation. Gets the collection and current index
            </summary>
            <example>
            <![CDATA[
            local devices = Midi.InputDeviceGetAll() -- Requires Key2Joy.Plugin.Midi
            for k, v in collection(devices) do
                print(v)
            end
            ]]>
            </example>
            <param name="collection">Collection to be iterated (always null? :/)</param>
            <param name="currentIndex">Null if first call, the current index otherwise</param>
            <param name="value"></param>
            <returns>The key/index of the collection</returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Scripting.LuaScriptAction.CollectionIterator(System.Collections.ICollection)">
            <summary>
            Returns a function that, when called, will return the next value in the collection.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Util.GetTimeAction.ExecuteForScript">
            <markdown-doc>
            <parent-name>Util</parent-name>
            <path>Api/Util</path>
            </markdown-doc>
            <summary>
            Gets the current system time UNIX in seconds
            </summary>
            <markdown-example>
            The code below prints 1661456521 to the logs if the system time is 19:42:01 (GMT) on the 25th of August, 2022.
            <code language="js">
            <![CDATA[
            Print(Util.GetUnixTimeSeconds())
            ]]>
            </code>
            </markdown-example>
            <returns>Time since UNIX in seconds</returns>
            <name>Util.GetUnixTimeSeconds</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Util.PathExpandAction.ExecuteForScript(System.String)">
            <markdown-doc>
            <parent-name>Util</parent-name>
            <path>Api/Util</path>
            </markdown-doc>
            <summary>
            Expands system environment variables (See also: https://ss64.com/nt/syntax-variables.html).
            </summary>
            <markdown-example>
            Demonstrates how to get the home drive
            <code language="js">
            <![CDATA[
            Print(Util.PathExpand("%HOMEDRIVE%/"))
            ]]>
            </code>
            </markdown-example>
            <returns>String containing expanded path</returns>
            <param name="path">The path to expand</param>
            <name>Util.PathExpand</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Windows.WindowFindAction.ExecuteForScript(System.String,System.String)">
            <markdown-doc>
            <parent-name>Windows</parent-name>
            <path>Api/Windows</path>
            </markdown-doc>
            <summary>
            Find a window of a piece of software currently running.
            </summary>
            <param name="className">Window class name</param>
            <param name="windowTitle">Optional window title</param>
            <returns>Handle for the window</returns>
            <name>Window.Find</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Windows.WindowGetAllAction.ExecuteForScript">
            <markdown-doc>
            <parent-name>Windows</parent-name>
            <path>Api/Windows</path>
            </markdown-doc>
            <summary>
            Fetches all windows of software currently running.
            </summary>
            <returns>List with handles of all the windows</returns>
            <name>Window.GetAll</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Windows.WindowGetClassAction.ExecuteForScript(System.IntPtr)">
             <markdown-doc>
             <parent-name>Windows</parent-name>
             <path>Api/Windows</path>
             </markdown-doc>
             <summary>
             Get the class name for a specified Window.
            
             You can use <see href="Window.GetAllAction.md">Window.GetAllAction</see>, <see href="Window.FindAction.md">Window.FindAction</see> or  <see href="Window.GetForegroundAction.md">Window.GetForegroundAction</see> to get handles.
             </summary>
             <param name="handle">The window handle to get the class for</param>
             <returns>Class name for the window</returns>
             <name>Window.GetClass</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Windows.WindowGetForegroundAction.ExecuteForScript">
            <markdown-doc>
            <parent-name>Windows</parent-name>
            <path>Api/Windows</path>
            </markdown-doc>
            <summary>
            Get the handle of a software's window that is currently in the foreground.
            </summary>
            <returns>Handle for the window</returns>
            <name>Window.GetForeground</name>
        </member>
        <member name="M:Key2Joy.Mapping.Actions.Windows.WindowGetTitleAction.ExecuteForScript(System.IntPtr)">
             <markdown-doc>
             <parent-name>Windows</parent-name>
             <path>Api/Windows</path>
             </markdown-doc>
             <summary>
             Get the title of a software's window.
            
             You can use <see href="Window.GetAll.md">Window.GetAll</see>, <see href="Window.Find.md">Window.Find</see> or <see href="Window.GetForeground.md">Window.GetForeground</see> to get handles.
             </summary>
             <param name="handle">The window handle to get the class for</param>
             <returns>Title of the window</returns>
             <name>Window.GetTitle</name>
        </member>
        <member name="M:Key2Joy.Mapping.ExposedEnumerationRepository.Buffer(System.Collections.Generic.IReadOnlyList{Key2Joy.Contracts.Mapping.ExposedEnumeration})">
            <summary>
            Check all types for the ExposedEnumeration attribute and store them for later use. Optionally merging it with additional enumerations.
            </summary>
            <param name="additionalExposedEnumerations"></param>
        </member>
        <member name="M:Key2Joy.Mapping.ExposedEnumerationRepository.GetAllExposedEnumerations">
            <summary>
            Gets all exposed enumerations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.JsonMappingAspectConverter`1.GetOptionsWithoutSelf(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Prevent recursion by not including this converter in child (de)serializations
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.MappingControlRepository.Buffer(System.Collections.Generic.IReadOnlyList{Key2Joy.Plugins.MappingControlFactory})">
            <summary>
            Check all types for the MappingControl attribute and store them for later use. Optionally merging it with additional Mapping Controls.
            </summary>
            <param name="additionalMappingControlFactories"></param>
        </member>
        <member name="M:Key2Joy.Mapping.MappingControlRepository.GetAllMappingControls">
            <summary>
            Gets all mapping controls and their targetted typename
            </summary>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.MappingControlRepository.GetMappingControlFactory(System.String)">
            <summary>
            Gets a specific mapping control factory by its type name
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Triggers.CoreTriggerListener.DoExecuteTrigger(System.Collections.Generic.IList{Key2Joy.Contracts.Mapping.AbstractMappedOption},Key2Joy.Contracts.Mapping.Triggers.AbstractInputBag,System.Func{Key2Joy.Contracts.Mapping.Triggers.AbstractTrigger,System.Boolean})">
             <summary>
             Subclasses MUST call this to have their actions executed.
            
             Even when they know no actions are listening, they should call this. This
             lets events provide other mapped options to be injected.
             </summary>
             <param name="mappedOptions"></param>
             <param name="inputBag"></param>
             <param name="optionCandidateFilter"></param>
        </member>
        <member name="M:Key2Joy.Mapping.Triggers.ITriggerOptionsControl.Select(Key2Joy.Contracts.Mapping.Triggers.AbstractTrigger)">
            <summary>
            Called to setup the options panel with a trigger
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="M:Key2Joy.Mapping.Triggers.ITriggerOptionsControl.Setup(Key2Joy.Contracts.Mapping.Triggers.AbstractTrigger)">
            <summary>
            Called when the options panel should modify a resulting trigger
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="E:Key2Joy.Mapping.Triggers.ITriggerOptionsControl.OptionsChanged">
            <summary>
            Called when the options on a trigger change
            </summary>
        </member>
        <member name="M:Key2Joy.Mapping.Triggers.TriggersRepository.Buffer(System.Collections.Generic.IReadOnlyList{Key2Joy.Plugins.MappingTypeFactory{Key2Joy.Contracts.Mapping.Triggers.AbstractTrigger}})">
            <summary>
            Loads all triggers in the assembly, optionally merging it with additional trigger types.
            </summary>
            <param name="additionalTriggerTypeFactories"></param>
        </member>
        <member name="M:Key2Joy.Mapping.Triggers.TriggersRepository.GetAllTriggers">
            <summary>
            Gets all trigger types and their attribute annotations
            </summary>
            <param name="forTopLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Mapping.Triggers.TriggersRepository.GetAllTriggers(System.Boolean)">
            <summary>
            Gets all trigger types and their attribute annotations depending on the specified visibility
            </summary>
            <param name="forTopLevel"></param>
            <returns></returns>
        </member>
        <member name="T:Key2Joy.Plugins.MappingControlFactory">
            <summary>
            Creates instances of the Control, simply using Activator.CreateInstance
            </summary>
        </member>
        <member name="T:Key2Joy.Plugins.TypeMappingControlFactory">
            <summary>
            Creates instances of the Control, simply using Activator.CreateInstance
            </summary>
        </member>
        <member name="T:Key2Joy.Plugins.PluginMappingControlFactory">
            <summary>
            Creates the Control by commanding the PluginHostProxy to create it.
            </summary>
        </member>
        <member name="M:Key2Joy.Plugins.PluginMappingControlFactory.ToType">
            <summary>
            Since we can't get the Type in the other appdomain, we return the host/contract class it derives from instead.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Key2Joy.Plugins.MappingTypeFactory">
            <summary>
            Creates instances of types, simply using Activator.CreateInstance
            </summary>
        </member>
        <member name="T:Key2Joy.Plugins.MappingTypeFactory`1">
            <summary>
            Creates instances of types, simply using Activator.CreateInstance
            </summary>
        </member>
        <member name="T:Key2Joy.Plugins.PluginMappingTypeFactory`1">
            <summary>
            Creates the type by commanding the PluginHostProxy to create it.
            </summary>
        </member>
        <member name="M:Key2Joy.Plugins.PluginMappingTypeFactory`1.ToType">
            <summary>
            Since we can't get the Type in the other appdomain, we return the host/contract class it derives from instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Plugins.MappingTypeHelper.EnsureSimpleTypeName(System.String)">
            <summary>
            Ensures the typename is valid, splitting the long variant into its short form
            </summary>
            <param name="typeInfoTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Plugins.MappingTypeHelper.GetTypeFullName``1(System.Collections.Generic.IDictionary{System.String,Key2Joy.Plugins.MappingTypeFactory{``0}},Key2Joy.Contracts.Mapping.AbstractMappingAspect)">
            <summary>
            Gets the typename, even if the object is a proxy
            </summary>
            <param name="typeFactories"></param>
            <param name="instance"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Key2Joy.Plugins.MappingTypeHelper.GetTypeFullName(System.Collections.Generic.IDictionary{System.String,Key2Joy.Plugins.MappingTypeFactory},Key2Joy.Contracts.Mapping.AbstractMappingAspect)">
            <summary>
            Gets the typename, even if the object is a proxy
            </summary>
            <param name="typeFactories"></param>
            <param name="instance"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="F:Key2Joy.Plugins.PluginHostProxy.actionFactories">
            Plugin customizations
        </member>
        <member name="M:Key2Joy.Plugins.PluginHostProxy.Start">
            <summary>
            Starts the plugin host process, setting up for communication:
            - A named pipe for signalling from the plugin (child) to the host (parent)
            - An IPC channel for communication towards the plugin (with authority)
            </summary>
        </member>
        <member name="M:Key2Joy.Plugins.PluginHostProxy.LoadPlugin(System.String@,System.String)">
             <summary>
            
             </summary>
             <param name="loadedChecksum"></param>
             <param name="expectedChecksum"></param>
             <exception cref="T:Key2Joy.Contracts.Plugins.PluginLoadException"></exception>
        </member>
        <member name="M:Key2Joy.Plugins.PluginHostProxy.DiscoverPluginType_ExposedEnumeration(Mono.Cecil.TypeDefinition,Mono.Cecil.CustomAttribute)">
            <summary>
            Gets the plugin types' enumeration names and values, and adds them to the list of exposed enumerations.
            </summary>
            <param name="type"></param>
            <param name="customAttribute"></param>
        </member>
        <member name="M:Key2Joy.Plugins.PluginHostProxy.CreateControl(System.String)">
            <summary>
            Asks the plugin to construct the WPF FrameworkElement. Then places it inside an ElementHost for use in WinForms.
            Can return null if the plugin crashes during creation.
            </summary>
            <param name="controlTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Plugins.PluginHostProxy.CreateAspectInstance``1(System.String,System.Object[])">
            <summary>
            Asks the plugin to construct the given type.
            </summary>
            <param name="fullTypeName"></param>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="F:Key2Joy.Plugins.PluginSet.actionFactories">
            Plugin customizations
        </member>
        <member name="M:Key2Joy.Plugins.PluginSet.#ctor(System.String)">
            <summary>
            Loads plugins from the specified directory
            </summary>
            <param name="pluginDirectoriesPaths">The absolute path to the directory containing the plugins</param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Plugins.PluginSet.DisablePlugin(System.String)">
            <summary>
            Disables the plugin for next load. Note that this doesnt unload resources already
            started by the plugin
            TODO: Fully unload plugin
            </summary>
            <param name="pluginAssemblyPath"></param>
        </member>
        <member name="T:Key2Joy.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Key2Joy.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Key2Joy.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Key2Joy.Properties.Resources.default_profile_k2j">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="M:Key2Joy.Util.FileSystem.FindNonExistingFile(System.String,System.Int32)">
            <summary>
            Tests the given pathFormat with a number to see if it exists, if it does it tries again while increasing the number until an available filename is found.
            </summary>
            <param name="pathFormat">A string containing %VERSION% that will become the filePath</param>
            <param name="startVersion">The number to place in %VERSION% on first attempt. Increments if not available.</param>
            <returns>The available file path</returns>
        </member>
        <member name="M:Key2Joy.Util.FileSystem.GetImageFormatFromExtension(System.String)">
            <summary>
            Returns the image format for the given extension.
            </summary>
            <param name="extension"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Key2Joy.Util.JsonUtilities">
            <summary>
            Utilities for JSON deserializing, based on:
            Source: https://github.com/dotnet/runtime/issues/29538#issuecomment-1330494636
            </summary>
        </member>
        <member name="M:Key2Joy.Util.JsonUtilities.PopulateObject``1(System.String,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserializes json into an existing object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="destination"></param>
            <param name="options"></param>
        </member>
        <member name="M:Key2Joy.Util.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Source: https://stackoverflow.com/a/457708
            </summary>
            <param name="generic"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Key2Joy.Util.TypeExtensions.CopyArrayToNewType(System.Object[],System.Type)">
            <summary>
            Copies a given array to a new array of the target type, e.g: from object[] to string[].
            </summary>
            <param name="originalArray"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
